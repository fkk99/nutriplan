import React, { useState, useEffect, useRef } from 'react';
import { Printer, RefreshCw, Clock, DollarSign, Mail, RotateCw, Dumbbell, ChevronDown, ChevronUp, Check, ShoppingCart, Heart, Share2, Download, Copy, Save } from 'lucide-react';
import { MealPlanData, DayPlan, Meal, MacroNutrients } from '../types';

interface MealPlanProps {
  mealPlan: MealPlanData;
  onReset: () => void;
  onRegenerateMeal: (dayIndex: number, mealType: string) => void;
  isLoading: boolean;
}

const MealPlan: React.FC<MealPlanProps> = ({ mealPlan, onReset, onRegenerateMeal, isLoading }) => {
  const [activeTab, setActiveTab] = useState<'plan' | 'shopping'>('plan');
  const [emailInput, setEmailInput] = useState('');
  const [emailSent, setEmailSent] = useState(false);
  const [expandedDay, setExpandedDay] = useState<number | null>(0); // First day expanded by default
  const [showShareModal, setShowShareModal] = useState(false);
  const [showExportModal, setShowExportModal] = useState(false);
  const [exportFormat, setExportFormat] = useState<'txt' | 'csv' | 'pdf'>('txt');
  const [linkCopied, setLinkCopied] = useState(false);
  const [planSaved, setPlanSaved] = useState(false);
  const [planName, setPlanName] = useState('');
  const shareUrlRef = useRef<HTMLInputElement>(null);
  
  const handlePrint = () => {
    window.print();
  };

  const handleSendEmail = (e: React.FormEvent) => {
    e.preventDefault();
    // Simulate sending email
    setEmailSent(true);
    setTimeout(() => {
      setEmailSent(false);
      setEmailInput('');
    }, 3000);
  };

  const handleSavePlan = () => {
    // Simulate saving plan to local storage
    const savedPlans = JSON.parse(localStorage.getItem('savedMealPlans') || '[]');
    const planToSave = {
      id: Date.now(),
      name: planName || `Meal Plan (${new Date().toLocaleDateString()})`,
      date: new Date().toISOString(),
      plan: mealPlan
    };
    
    savedPlans.push(planToSave);
    localStorage.setItem('savedMealPlans', JSON.stringify(savedPlans));
    
    setPlanSaved(true);
    setTimeout(() => {
      setPlanSaved(false);
      setPlanName('');
    }, 3000);
  };

  const handleSharePlan = () => {
    setShowShareModal(true);
  };

  const handleCopyLink = () => {
    if (shareUrlRef.current) {
      shareUrlRef.current.select();
      document.execCommand('copy');
      setLinkCopied(true);
      setTimeout(() => setLinkCopied(false), 3000);
    }
  };

  const handleExportShoppingList = () => {
    if (activeTab !== 'shopping') {
      setActiveTab('shopping');
    }
    setShowExportModal(true);
  };

  const generateExportContent = (): string => {
    let content = '';
    
    if (exportFormat === 'txt') {
      content = `SHOPPING LIST - ${new Date().toLocaleDateString()}\n\n`;
      
      mealPlan.shoppingList.forEach(category => {
        content += `${category.category.toUpperCase()}\n`;
        category.items.forEach(item => {
          content += `- ${item.name} (${item.quantity}) - ${item.price.toFixed(2)} €\n`;
        });
        content += '\n';
      });
      
      content += `\nTotal Cost: ${mealPlan.totalCost.toFixed(2)} €\n`;
      content += '\nGenerated by Nutriplan';
    } else if (exportFormat === 'csv') {
      content = 'Category,Item,Quantity,Price\n';
      
      mealPlan.shoppingList.forEach(category => {
        category.items.forEach(item => {
          content += `"${category.category}","${item.name}","${item.quantity}",${item.price.toFixed(2)}\n`;
        });
      });
      
      content += `"Total","","",${mealPlan.totalCost.toFixed(2)}\n`;
    }
    
    return content;
  };

  const downloadExport = () => {
    const content = generateExportContent();
    const extension = exportFormat === 'csv' ? 'csv' : 'txt';
    const mimeType = exportFormat === 'csv' ? 'text/csv' : 'text/plain';
    
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    
    link.href = url;
    link.download = `shopping-list-${new Date().toISOString().split('T')[0]}.${extension}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    setShowExportModal(false);
  };

  // Calculate daily macros for each day
  const calculateDailyMacros = (day: DayPlan): MacroNutrients => {
    return day.meals.reduce((acc, meal) => {
      return {
        protein: acc.protein + (meal.macros?.protein || 0),
        carbs: acc.carbs + (meal.macros?.carbs || 0),
        fat: acc.fat + (meal.macros?.fat || 0),
        fiber: acc.fiber + (meal.macros?.fiber || 0)
      };
    }, { protein: 0, carbs: 0, fat: 0, fiber: 0 });
  };

  // Check if macros are within target range
  const isMacroWithinTarget = (value: number, target: number | null | undefined, tolerance = 0.15): string => {
    if (!target) return "text-gray-700"; // No target set
    
    const lowerBound = target * (1 - tolerance);
    const upperBound = target * (1 + tolerance);
    
    if (value < lowerBound) return "text-red-600"; // Too low
    if (value > upperBound) return "text-orange-600"; // Too high
    return "text-green-600"; // Within range
  };

  // Format macro value with color based on target
  const formatMacroValue = (value: number, target: number | null | undefined): JSX.Element => {
    const colorClass = isMacroWithinTarget(value, target);
    return <span className={colorClass}>{value.toFixed(1)}g</span>;
  };

  // Calculate total calories from macros
  const calculateCaloriesFromMacros = (macros: MacroNutrients): number => {
    return (macros.protein * 4) + (macros.carbs * 4) + (macros.fat * 9);
  };

  // Toggle day expansion
  const toggleDayExpansion = (dayIndex: number) => {
    setExpandedDay(expandedDay === dayIndex ? null : dayIndex);
  };

  // Calculate macro percentages
  const calculateMacroPercentages = (macros: MacroNutrients, calories: number): { protein: number, carbs: number, fat: number } => {
    return {
      protein: Math.round((macros.protein * 4 / calories) * 100),
      carbs: Math.round((macros.carbs * 4 / calories) * 100),
      fat: Math.round((macros.fat * 9 / calories) * 100)
    };
  };

  return (
    <div className="premium-card overflow-hidden transition-all duration-300">
      {/* Header */}
      <div className="bg-gradient-to-r from-green-600 to-green-500 text-white p-8">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
          <div className="mb-4 md:mb-0">
            <h2 className="text-3xl font-bold">Your Personalized Meal Plan</h2>
            <p className="mt-2 text-green-100">Tailored to your preferences and nutritional goals</p>
          </div>
          <div className="flex flex-wrap gap-2 no-print">
            <button 
              onClick={handlePrint}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-green-700 bg-white hover:bg-green-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 shadow-sm transition-all duration-200"
            >
              <Printer className="h-4 w-4 mr-2" />
              Print
            </button>
            <button 
              onClick={() => setShowShareModal(true)}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-green-700 bg-white hover:bg-green-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 shadow-sm transition-all duration-200"
            >
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </button>
            <button 
              onClick={onReset}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-green-700 bg-white hover:bg-green-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 shadow-sm transition-all duration-200"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              Start Over
            </button>
          </div>
        </div>
        
        <div className="mt-6 flex flex-wrap gap-2">
          {mealPlan.preferences.dietaryRestrictions.map(restriction => (
            <span key={restriction} className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-white bg-opacity-20 text-white">
              {restriction}
            </span>
          ))}
          {mealPlan.preferences.calorieTarget && (
            <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-white bg-opacity-20 text-white">
              <Heart className="h-3 w-3 mr-1" />
              {mealPlan.preferences.calorieTarget} calories/day
            </span>
          )}
          {mealPlan.preferences.macroTargets?.protein && (
            <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-white bg-opacity-20 text-white">
              <Dumbbell className="h-3 w-3 mr-1" />
              Protein: {mealPlan.preferences.macroTargets.protein}g
            </span>
          )}
        </div>
      </div>
      
      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex" aria-label="Tabs">
          <button
            onClick={() => setActiveTab('plan')}
            className={`w-1/2 py-4 px-1 text-center border-b-2 font-medium text-sm transition-all duration-200 ${
              activeTab === 'plan'
                ? 'border-green-500 text-green-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Meal Plan
          </button>
          <button
            onClick={() => setActiveTab('shopping')}
            className={`w-1/2 py-4 px-1 text-center border-b-2 font-medium text-sm transition-all duration-200 ${
              activeTab === 'shopping'
                ? 'border-green-500 text-green-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            <ShoppingCart className="h-4 w-4 inline mr-2" />
            Shopping List
          </button>
        </nav>
      </div>
      
      {/* Content */}
      <div className="p-6 md:p-8">
        {activeTab === 'plan' ? (
          <div>
            {/* Save Plan Form */}
            <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-100 no-print">
              <h4 className="text-md font-medium text-blue-800 mb-3 flex items-center">
                <Save className="h-4 w-4 mr-2" />
                Save This Meal Plan
              </h4>
              <div className="flex flex-col sm:flex-row items-center gap-3">
                <div className="relative flex-grow">
                  <input
                    type="text"
                    value={planName}
                    onChange={(e) => setPlanName(e.target.value)}
                    placeholder="Give your meal plan a name (optional)"
                    className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                  />
                </div>
                <button
                  onClick={handleSavePlan}
                  className="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200"
                >
                  Save Plan
                </button>
              </div>
              
              {planSaved && (
                <div className="mt-3 p-3 bg-blue-100 text-blue-800 rounded-md flex items-center animate-fade-in">
                  <Check className="h-5 w-5 mr-2 text-blue-500" />
                  Meal plan saved successfully!
                </div>
              )}
            </div>
            
            {/* Overview of all days */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold text-gray-900 mb-6">Your {mealPlan.days.length}-Day Meal Plan</h3>
              
              <div className="space-y-6">
                {mealPlan.days.map((day, dayIndex) => {
                  const dailyMacros = calculateDailyMacros(day);
                  const totalCaloriesFromMacros = calculateCaloriesFromMacros(dailyMacros);
                  const macroPercentages = calculateMacroPercentages(dailyMacros, totalCaloriesFromMacros);
                  const isExpanded = expandedDay === dayIndex;
                  
                  return (
                    <div key={dayIndex} className="premium-card border border-gray-100 overflow-hidden transition-all duration-300">
                      <div 
                        className={`px-6 py-4 border-b border-gray-100 cursor-pointer transition-all duration-200 ${isExpanded ? 'bg-green-50' : 'bg-white hover:bg-gray-50'}`}
                        onClick={() => toggleDayExpansion(dayIndex)}
                      >
                        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center">
                          <div className="flex items-center">
                            <h4 className="text-lg font-semibold text-gray-800">Day {day.day}</h4>
                            {isExpanded ? 
                              <ChevronUp className="h-5 w-5 ml-2 text-gray-500" /> : 
                              <ChevronDown className="h-5 w-5 ml-2 text-gray-500" />
                            }
                          </div>
                          
                          {/* Daily Macros Summary */}
                          <div className="mt-2 sm:mt-0 flex flex-wrap gap-x-4 gap-y-1 text-sm">
                            <div className="flex items-center">
                              <span className="font-medium mr-1">Calories:</span>
                              <span className={isMacroWithinTarget(
                                totalCaloriesFromMacros, 
                                mealPlan.preferences.calorieTarget
                              )}>
                                {totalCaloriesFromMacros.toFixed(0)}
                              </span>
                            </div>
                            <div className="flex items-center">
                              <span className="font-medium mr-1">P:</span>
                              {formatMacroValue(dailyMacros.protein, mealPlan.preferences.macroTargets?.protein)}
                              <span className="text-xs text-gray-500 ml-1">({macroPercentages.protein}%)</span>
                            </div>
                            <div className="flex items-center">
                              <span className="font-medium mr-1">C:</span>
                              {formatMacroValue(dailyMacros.carbs, mealPlan.preferences.macroTargets?.carbs)}
                              <span className="text-xs text-gray-500 ml-1">({macroPercentages.carbs}%)</span>
                            </div>
                            <div className="flex items-center">
                              <span className="font-medium mr-1">F:</span>
                              {formatMacroValue(dailyMacros.fat, mealPlan.preferences.macroTargets?.fat)}
                              <span className="text-xs text-gray-500 ml-1">({macroPercentages.fat}%)</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      {isExpanded && (
                        <div className="divide-y divide-gray-100 animate-fade-in">
                          {day.meals.map((meal, mealIndex) => {
                            const mealMacroPercentages = calculateMacroPercentages(meal.macros, meal.calories);
                            
                            return (
                              <div key={mealIndex} className="p-6 transition-all duration-200 hover:bg-gray-50">
                                <div className="flex justify-between items-start">
                                  <div className="flex items-start">
                                    <div className="h-20 w-20 rounded-lg overflow-hidden mr-5 hidden sm:block">
                                      <img 
                                        src={meal.image} 
                                        alt={meal.name} 
                                        className="h-full w-full object-cover transition-all duration-500 hover:scale-110"
                                      />
                                    </div>
                                    <div>
                                      <span className="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full mb-2">
                                        {meal.type}
                                      </span>
                                      <h5 className="text-lg font-semibold text-gray-900">{meal.name}</h5>
                                      <div className="flex items-center mt-1 text-sm text-gray-500">
                                        <Clock className="h-3 w-3 mr-1" />
                                        {meal.prepTime} min
                                        <span className="mx-2">•</span>
                                        {meal.calories} calories
                                      </div>
                                      
                                      {/* Meal Macros */}
                                      <div className="mt-2 flex flex-wrap gap-x-3 text-sm">
                                        <span className="text-gray-700">P: {meal.macros?.protein.toFixed(1)}g <span className="text-xs text-gray-500">({mealMacroPercentages.protein}%)</span></span>
                                        <span className="text-gray-700">C: {meal.macros?.carbs.toFixed(1)}g <span className="text-xs text-gray-500">({mealMacroPercentages.carbs}%)</span></span>
                                        <span className="text-gray-700">F: {meal.macros?.fat.toFixed(1)}g <span className="text-xs text-gray-500">({mealMacroPercentages.fat}%)</span></span>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  <button
                                    onClick={() => onRegenerateMeal(dayIndex, meal.type)}
                                    disabled={isLoading}
                                    className="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
                                  >
                                    {isLoading ? (
                                      <RotateCw className="h-3 w-3 mr-1 animate-spin" />
                                    ) : (
                                      <RotateCw className="h-3 w-3 mr-1" />
                                    )}
                                    Regenerate
                                  </button>
                                </div>
                                
                                <div className="mt-4">
                                  <details className="group">
                                    <summary className="flex items-center text-sm text-green-600 hover:text-green-800 font-medium cursor-pointer focus:outline-none transition-all duration-200">
                                      <span>Show Details</span>
                                      <ChevronDown className="h-4 w-4 ml-1 group-open:rotate-180 transition-transform duration-200" />
                                    </summary>
                                    
                                    <div className="mt-4 pl-2 space-y-6 animate-fade-in">
                                      <div>
                                        <h6 className="text-sm font-medium text-gray-700 mb-3">Ingredients</h6>
                                        <ul className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                                          {meal.ingredients.map((ingredient, index) => (
                                            <li key={index} className="text-sm text-gray-600 flex items-center">
                                              <span className="h-1.5 w-1.5 rounded-full bg-green-500 mr-2"></span>
                                              {ingredient.name} ({ingredient.quantity})
                                            </li>
                                          ))}
                                        </ul>
                                      </div>
                                      
                                      <div>
                                        <h6 className="text-sm font-medium text-gray-700 mb-3">Instructions</h6>
                                        <ol className="space-y-2">
                                          {meal.instructions.map((instruction, index) => (
                                            <li key={index} className="text-sm text-gray-600 flex">
                                              <span className="flex-shrink-0 h-5 w-5 rounded-full bg-green-100 text-green-600 flex items-center justify-center mr-3 font-medium text-xs">{index + 1}</span>
                                              <span>{instruction}</span>
                                            </li>
                                          ))}
                                        </ol>
                                      </div>
                                      
                                      {/* Detailed Nutrition Information */}
                                      <div>
                                        <h6 className="text-sm font-medium text-gray-700 mb-3">Nutrition Information</h6>
                                        <div className="bg-gray-50 p-4 rounded-lg">
                                          <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                                            <div>
                                              <p className="text-xs text-gray-500">Calories</p>
                                              <p className="text-sm font-medium">{meal.calories} kcal</p>
                                            </div>
                                            <div>
                                              <p className="text-xs text-gray-500">Protein</p>
                                              <p className="text-sm font-medium">{meal.macros?.protein.toFixed(1)}g <span className="text-xs text-gray-500">({mealMacroPercentages.protein}%)</span></p>
                                            </div>
                                            <div>
                                              <p className="text-xs text-gray-500">Carbohydrates</p>
                                              <p className="text-sm font-medium">{meal.macros?.carbs.toFixed(1)}g <span className="text-xs text-gray-500">({mealMacroPercentages.carbs}%)</span></p>
                                            </div>
                                            <div>
                                              <p className="text-xs text-gray-500">Fat</p>
                                              <p className="text-sm font-medium">{meal.macros?.fat.toFixed(1)}g <span className="text-xs text-gray-500">({mealMacroPercentages.fat}%)</span></p>
                                            </div>
                                            <div>
                                              <p className="text-xs text-gray-500">Fiber</p>
                                              <p className="text-sm font-medium">{meal.macros?.fiber.toFixed(1)}g</p>
                                            </div>
                                          </div>
                                          
                                          {/* Macro Visualization */}
                                          <div className="mt-4">
                                            <div className="h-2 w-full bg-gray-200 rounded-full overflow-hidden">
                                              <div className="flex h-full">
                                                <div 
                                                  className="bg-blue-500 h-full" 
                                                  style={{ width: `${mealMacroPercentages.protein}%` }}
                                                  title={`Protein: ${mealMacroPercentages.protein}%`}
                                                ></div>
                                                <div 
                                                  className="bg-green-500 h-full" 
                                                  style={{ width: `${mealMacroPercentages.carbs}%` }}
                                                  title={`Carbs: ${mealMacroPercentages.carbs}%`}
                                                ></div>
                                                <div 
                                                  className="bg-yellow-500 h-full" 
                                                  style={{ width: `${mealMacroPercentages.fat}%` }}
                                                  title={`Fat: ${mealMacroPercentages.fat}%`}
                                                ></div>
                                              </div>
                                            </div>
                                            <div className="flex justify-between mt-1 text-xs text-gray-500">
                                              <span className="flex items-center">
                                                <span className="h-2 w-2 bg-blue-500 rounded-full mr-1"></span>
                                                Protein
                                              </span>
                                              <span className="flex items-center">
                                                <span className="h-2 w-2 bg-green-500 rounded-full mr-1"></span>
                                                Carbs
                                              </span>
                                              <span className="flex items-center">
                                                <span className="h-2 w-2 bg-yellow-500 rounded-full mr-1"></span>
                                                Fat
                                              </span>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </details>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        ) : (
          <div className="animate-fade-in">
            <div className="mb-8">
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
                <h3 className="text-xl font-semibold text-gray-900">Shopping List</h3>
                <div className="mt-2 sm:mt-0 flex items-center gap-2">
                  <div className="flex items-center text-green-600">
                    <DollarSign className="h-5 w-5 mr-1" />
                    <span className="font-medium">Estimated Total: {mealPlan.totalCost.toFixed(2)} €</span>
                  </div>
                  <button
                    onClick={handleExportShoppingList}
                    className="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200"
                  >
                    <Download className="h-3 w-3 mr-1" />
                    Export
                  </button>
                </div>
              </div>
              
              {/* Email form */}
              <form onSubmit={handleSendEmail} className="mb-8 p-6 bg-gray-50 rounded-lg border border-gray-100">
                <h4 className="text-md font-medium text-gray-800 mb-3">Send Shopping List to Your Email</h4>
                <div className="flex flex-col sm:flex-row items-center gap-3">
                  <div className="relative flex-grow">
                    <Mail className="h-5 w-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
                    <input
                      type="email"
                      value={emailInput}
                      onChange={(e) => setEmailInput(e.target.value)}
                      placeholder="Enter your email address"
                      className="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
                      required
                    />
                  </div>
                  <button
                    type="submit"
                    className="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200"
                  >
                    Send List
                  </button>
                </div>
                
                {emailSent && (
                  <div className="mt-3 p-3 bg-green-50 text-green-800 rounded-md flex items-center animate-fade-in">
                    <Check className="h-5 w-5 mr-2 text-green-500" />
                    Shopping list sent to your email!
                  </div>
                )}
              </form>
              
              <div className="space-y-6">
                {mealPlan.shoppingList.map((category, index) => (
                  <div key={index} className="premium-card p-5">
                    <h4 className="text-md font-medium text-gray-800 mb-4 flex items-center">
                      <span className="h-2 w-2 rounded-full bg-green-500 mr-2"></span>
                      {category.category}
                    </h4>
                    <ul className="space-y-3">
                      {category.items.map((item, itemIndex) => (
                        <li key={itemIndex} className="flex justify-between items-center py-2 border-b border-gray-100 last:border-0">
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              id={`item-${index}-${itemIndex}`}
                              className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded transition-all duration-200"
                            />
                            <label htmlFor={`item-${index}-${itemIndex}`} className="ml-3 text-sm text-gray-700 cursor-pointer hover:text-gray-900 transition-all duration-200">
                              {item.name} <span className="text-gray-500">({item.quantity})</span>
                            </label>
                          </div>
                          <span className="text-sm font-medium text-gray-700">{item.price.toFixed(2)} €</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="mt-8 premium-card p-6 border-l-4 border-yellow-400">
              <h4 className="text-md font-medium text-gray-800 mb-4 flex items-center">
                <DollarSign className="h-5 w-5 mr-2 text-yellow-500" />
                Money-Saving Tips
              </h4>
              <ul className="space-y-3">
                {mealPlan.savingTips.map((tip, index) => (
                  <li key={index} className="text-sm text-gray-700 flex items-start">
                    <span className="flex-shrink-0 h-5 w-5 rounded-full bg-yellow-100 text-yellow-600 flex items-center justify-center mr-3 font-medium text-xs">{index + 1}</span>
                    {tip}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>
      
      {/* Share Modal */}
      {showShareModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 animate-fade-in">
          <div className="bg-white rounded-lg max-w-md w-full p-6 shadow-xl">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Share Your Meal Plan</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Share Link</label>
                <div className="flex">
                  <input
                    ref={shareUrlRef}
                    type="text"
                    readOnly
                    value={`https://nutriplan.example.com/shared/${Date.now().toString(36)}`}
                    className="flex-grow rounded-l-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
                  />
                  <button
                    onClick={handleCopyLink}
                    className="inline-flex items-center px-3 py-2 border border-l-0 border-gray-300 rounded-r-md bg-gray-50 text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  >
                    <Copy className="h-4 w-4" />
                  </button>
                </div>
                {linkCopied && (
                  <p className="mt-1 text-sm text-green-600">Link copied to clipboard!</p>
                )}
              </div>
              
              <div>
                <p className="text-sm text-gray-500 mb-2">Share directly to:</p>
                <div className="flex space-x-2">
                  <button className="flex-1 inline-flex justify-center items-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    <svg className="h-5 w-5 text-blue-600 mr-2" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
                    </svg>
                    Facebook
                  </button>
                  <button className="flex-1 inline-flex justify-center items-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    <svg className="h-5 w-5 text-blue-400 mr-2" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z" />
                    </svg>
                    Twitter
                  </button>
                  <button className="flex-1 inline-flex justify-center items-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    <svg className="h-5 w-5 text-green-600 mr-2" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z" />
                    </svg>
                    WhatsApp
                  </button>
                </div>
              </div>
            </div>
            
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => setShowShareModal(false)}
                className="inline-flex justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Export Modal */}
      {showExportModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 animate-fade-in">
          <div className="bg-white rounded-lg max-w-md w-full p-6 shadow-xl">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Export Shopping List</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Choose Format</label>
                <div className="grid grid-cols-3 gap-3">
                  <div
                    className={`cursor-pointer border rounded-md p-4 text-center transition-all duration-200 ${
                      exportFormat === 'txt' ? 'border-green-500 bg-green-50' : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => setExportFormat('txt')}
                  >
                    <p className="font-medium">TXT</p>
                    <p className="text-xs text-gray-500 mt-1">Plain Text</p>
                  </div>
                  <div
                    className={`cursor-pointer border rounded-md p-4 text-center transition-all duration-200 ${
                      exportFormat === 'csv' ? 'border-green-500 bg-green-50' : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => setExportFormat('csv')}
                  >
                    <p className="font-medium">CSV</p>
                    <p className="text-xs text-gray-500 mt-1">Spreadsheet</p>
                  </div>
                  <div
                    className={`cursor-pointer border rounded-md p-4 text-center transition-all duration-200 ${
                      exportFormat === 'pdf' ? 'border-green-500 bg-green-50' : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => setExportFormat('pdf')}
                  >
                    <p className="font-medium">PDF</p>
                    <p className="text-xs text-gray-500 mt-1">Document</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-gray-50 p-4 rounded-md">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Format Details</h4>
                {exportFormat === 'txt' && (
                  <p className="text-sm text-gray-600">Plain text format that can be opened in any text editor. Simple and universally compatible.</p>
                )}
                {exportFormat === 'csv' && (
                  <p className="text-sm text-gray-600">CSV format for spreadsheet applications like Excel or Google Sheets. Good for organizing and calculating.</p>
                )}
                {exportFormat === 'pdf' && (
                  <p className="text-sm text-gray-600">PDF document format for high-quality printing and sharing. Maintains formatting across all devices.</p>
                )}
              </div>
            </div>
            
            <div className="mt-6 flex justify-end space-x-3">
              <button
                onClick={() => setShowExportModal(false)}
                className="inline-flex justify-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                Cancel
              </button>
              <button
                onClick={downloadExport}
                className="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                <Download className="h-4 w-4 mr-2" />
                Download
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MealPlan;